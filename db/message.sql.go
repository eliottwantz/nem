// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: message.sql

package db

import (
	"context"
	"time"
)

const createMessage = `-- name: CreateMessage :one

INSERT INTO
    "message" ("user_id", "class_id", "text")
VALUES ($1, $2, $3) RETURNING id, text, user_id, class_id, created_at, updated_at
`

type CreateMessageParams struct {
	UserID  string
	ClassID string
	Text    string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (*Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.UserID, arg.ClassID, arg.Text)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.UserID,
		&i.ClassID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteMessage = `-- name: DeleteMessage :exec

DELETE FROM "message" WHERE "id" = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const listMessages = `-- name: ListMessages :many

SELECT id, text, user_id, class_id, created_at, updated_at FROM "message"
`

func (q *Queries) ListMessages(ctx context.Context) ([]*Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.UserID,
			&i.ClassID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one

UPDATE "message"
SET
    "text" = $1,
    "updated_at" = $2
WHERE "id" = $3 RETURNING id, text, user_id, class_id, created_at, updated_at
`

type UpdateMessageParams struct {
	Text      string
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (*Message, error) {
	row := q.db.QueryRowContext(ctx, updateMessage, arg.Text, arg.UpdatedAt, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.UserID,
		&i.ClassID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
