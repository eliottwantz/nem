// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: topictaught.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addTeacherToTopicTaught = `-- name: AddTeacherToTopicTaught :exec

INSERT INTO
    "teacher_topic_taught" (teacher_id, topic_taught_id)
VALUES ($1, $2) ON CONFLICT (teacher_id, topic_taught_id)
DO NOTHING RETURNING teacher_id, topic_taught_id
`

type AddTeacherToTopicTaughtParams struct {
	TeacherID     uuid.UUID
	TopicTaughtID int32
}

func (q *Queries) AddTeacherToTopicTaught(ctx context.Context, arg AddTeacherToTopicTaughtParams) error {
	_, err := q.db.ExecContext(ctx, addTeacherToTopicTaught, arg.TeacherID, arg.TopicTaughtID)
	return err
}

const createTopicTaught = `-- name: CreateTopicTaught :one

INSERT INTO
    "topic_taught" (language, topic)
VALUES ($1, $2) ON CONFLICT (language, topic)
DO NOTHING RETURNING id, topic, language
`

type CreateTopicTaughtParams struct {
	Language string
	Topic    string
}

func (q *Queries) CreateTopicTaught(ctx context.Context, arg CreateTopicTaughtParams) (*TopicTaught, error) {
	row := q.db.QueryRowContext(ctx, createTopicTaught, arg.Language, arg.Topic)
	var i TopicTaught
	err := row.Scan(&i.ID, &i.Topic, &i.Language)
	return &i, err
}

const deleteTopicTaught = `-- name: DeleteTopicTaught :exec

DELETE FROM "topic_taught" WHERE id = $1
`

func (q *Queries) DeleteTopicTaught(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTopicTaught, id)
	return err
}

const findTopicTaught = `-- name: FindTopicTaught :one

SELECT id, topic, language FROM "topic_taught" WHERE id = $1
`

func (q *Queries) FindTopicTaught(ctx context.Context, id int32) (*TopicTaught, error) {
	row := q.db.QueryRowContext(ctx, findTopicTaught, id)
	var i TopicTaught
	err := row.Scan(&i.ID, &i.Topic, &i.Language)
	return &i, err
}

const findTopicTaughtLangTopic = `-- name: FindTopicTaughtLangTopic :one

SELECT id, topic, language FROM "topic_taught" WHERE language = $1 AND topic = $2
`

type FindTopicTaughtLangTopicParams struct {
	Language string
	Topic    string
}

func (q *Queries) FindTopicTaughtLangTopic(ctx context.Context, arg FindTopicTaughtLangTopicParams) (*TopicTaught, error) {
	row := q.db.QueryRowContext(ctx, findTopicTaughtLangTopic, arg.Language, arg.Topic)
	var i TopicTaught
	err := row.Scan(&i.ID, &i.Topic, &i.Language)
	return &i, err
}

const listAvailableTopicTaught = `-- name: ListAvailableTopicTaught :many

SELECT DISTINCT tt.id, tt.topic, tt.language
FROM "topic_taught" tt
    JOIN "teacher_topic_taught" ttt ON tt.id = ttt.topic_taught_id
    JOIN "teacher" t ON ttt.teacher_id = t.id
`

func (q *Queries) ListAvailableTopicTaught(ctx context.Context) ([]*TopicTaught, error) {
	rows, err := q.db.QueryContext(ctx, listAvailableTopicTaught)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TopicTaught
	for rows.Next() {
		var i TopicTaught
		if err := rows.Scan(&i.ID, &i.Topic, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicTaught = `-- name: ListTopicTaught :many

SELECT id, topic, language FROM "topic_taught"
`

func (q *Queries) ListTopicTaught(ctx context.Context) ([]*TopicTaught, error) {
	rows, err := q.db.QueryContext(ctx, listTopicTaught)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TopicTaught
	for rows.Next() {
		var i TopicTaught
		if err := rows.Scan(&i.ID, &i.Topic, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicTaughtOfTeacher = `-- name: ListTopicTaughtOfTeacher :many

SELECT tt.id, tt.topic, tt.language
FROM "topic_taught" tt
    JOIN "teacher_topic_taught" t ON tt.id = t.topic_taught_id
WHERE t.teacher_id = $1
`

func (q *Queries) ListTopicTaughtOfTeacher(ctx context.Context, teacherID uuid.UUID) ([]*TopicTaught, error) {
	rows, err := q.db.QueryContext(ctx, listTopicTaughtOfTeacher, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TopicTaught
	for rows.Next() {
		var i TopicTaught
		if err := rows.Scan(&i.ID, &i.Topic, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicTaughtWhereLangIs = `-- name: ListTopicTaughtWhereLangIs :many

SELECT id, topic, language FROM "topic_taught" WHERE language = $1
`

func (q *Queries) ListTopicTaughtWhereLangIs(ctx context.Context, language string) ([]*TopicTaught, error) {
	rows, err := q.db.QueryContext(ctx, listTopicTaughtWhereLangIs, language)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TopicTaught
	for rows.Next() {
		var i TopicTaught
		if err := rows.Scan(&i.ID, &i.Topic, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicTaughtWhereTopicIs = `-- name: ListTopicTaughtWhereTopicIs :many

SELECT id, topic, language FROM "topic_taught" WHERE topic = $1
`

func (q *Queries) ListTopicTaughtWhereTopicIs(ctx context.Context, topic string) ([]*TopicTaught, error) {
	rows, err := q.db.QueryContext(ctx, listTopicTaughtWhereTopicIs, topic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TopicTaught
	for rows.Next() {
		var i TopicTaught
		if err := rows.Scan(&i.ID, &i.Topic, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeacherFromTopicTaught = `-- name: RemoveTeacherFromTopicTaught :exec

DELETE FROM
    "teacher_topic_taught"
WHERE
    teacher_id = $1
    AND topic_taught_id = $2
`

type RemoveTeacherFromTopicTaughtParams struct {
	TeacherID     uuid.UUID
	TopicTaughtID int32
}

func (q *Queries) RemoveTeacherFromTopicTaught(ctx context.Context, arg RemoveTeacherFromTopicTaughtParams) error {
	_, err := q.db.ExecContext(ctx, removeTeacherFromTopicTaught, arg.TeacherID, arg.TopicTaughtID)
	return err
}
