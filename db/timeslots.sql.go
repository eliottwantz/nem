// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: timeslots.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addTimeSlot = `-- name: AddTimeSlot :one

INSERT INTO
    "time_slots" (
        "teacher_id",
        "start_at",
        "end_at"
    )
VALUES ($1, $2, $3) RETURNING id, start_at, end_at, teacher_id
`

type AddTimeSlotParams struct {
	TeacherID string
	StartAt   time.Time
	EndAt     time.Time
}

func (q *Queries) AddTimeSlot(ctx context.Context, arg AddTimeSlotParams) (*TimeSlot, error) {
	row := q.db.QueryRowContext(ctx, addTimeSlot, arg.TeacherID, arg.StartAt, arg.EndAt)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.StartAt,
		&i.EndAt,
		&i.TeacherID,
	)
	return &i, err
}

const deleteTimeSlot = `-- name: DeleteTimeSlot :exec

DELETE FROM "time_slots"
WHERE
    "id" = $1
    AND "teacher_id" = $2
`

type DeleteTimeSlotParams struct {
	ID        uuid.UUID
	TeacherID string
}

func (q *Queries) DeleteTimeSlot(ctx context.Context, arg DeleteTimeSlotParams) error {
	_, err := q.db.ExecContext(ctx, deleteTimeSlot, arg.ID, arg.TeacherID)
	return err
}

const findTimeSlot = `-- name: FindTimeSlot :one

SELECT id, start_at, end_at, teacher_id FROM "time_slots" WHERE "id" = $1
`

func (q *Queries) FindTimeSlot(ctx context.Context, id uuid.UUID) (*TimeSlot, error) {
	row := q.db.QueryRowContext(ctx, findTimeSlot, id)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.StartAt,
		&i.EndAt,
		&i.TeacherID,
	)
	return &i, err
}

const findTimeSlotsTeacherAndTime = `-- name: FindTimeSlotsTeacherAndTime :many

SELECT id, start_at, end_at, teacher_id
FROM "time_slots"
WHERE
    "teacher_id" = $1
    AND "start_at" >= $2
    AND "end_at" <= $3
`

type FindTimeSlotsTeacherAndTimeParams struct {
	TeacherID string
	StartAt   time.Time
	EndAt     time.Time
}

func (q *Queries) FindTimeSlotsTeacherAndTime(ctx context.Context, arg FindTimeSlotsTeacherAndTimeParams) ([]*TimeSlot, error) {
	rows, err := q.db.QueryContext(ctx, findTimeSlotsTeacherAndTime, arg.TeacherID, arg.StartAt, arg.EndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TimeSlot
	for rows.Next() {
		var i TimeSlot
		if err := rows.Scan(
			&i.ID,
			&i.StartAt,
			&i.EndAt,
			&i.TeacherID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTimeSlots = `-- name: ListTimeSlots :many

SELECT id, start_at, end_at, teacher_id FROM "time_slots" WHERE "teacher_id" = $1
`

func (q *Queries) ListTimeSlots(ctx context.Context, teacherID string) ([]*TimeSlot, error) {
	rows, err := q.db.QueryContext(ctx, listTimeSlots, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TimeSlot
	for rows.Next() {
		var i TimeSlot
		if err := rows.Scan(
			&i.ID,
			&i.StartAt,
			&i.EndAt,
			&i.TeacherID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimeSlot = `-- name: UpdateTimeSlot :one

UPDATE "time_slots"
SET
    "start_at" = $1,
    "end_at" = $2
WHERE
    "id" = $3
    AND "teacher_id" = $4 RETURNING id, start_at, end_at, teacher_id
`

type UpdateTimeSlotParams struct {
	StartAt   time.Time
	EndAt     time.Time
	ID        uuid.UUID
	TeacherID string
}

func (q *Queries) UpdateTimeSlot(ctx context.Context, arg UpdateTimeSlotParams) (*TimeSlot, error) {
	row := q.db.QueryRowContext(ctx, updateTimeSlot,
		arg.StartAt,
		arg.EndAt,
		arg.ID,
		arg.TeacherID,
	)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.StartAt,
		&i.EndAt,
		&i.TeacherID,
	)
	return &i, err
}
