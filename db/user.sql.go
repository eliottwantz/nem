// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addStripeCustomerId = `-- name: AddStripeCustomerId :exec
UPDATE "user"
SET stripe_customer_id = $1
WHERE id = $2
`

type AddStripeCustomerIdParams struct {
	StripeCustomerID sql.NullString
	ID               uuid.UUID
}

func (q *Queries) AddStripeCustomerId(ctx context.Context, arg AddStripeCustomerIdParams) error {
	_, err := q.db.ExecContext(ctx, addStripeCustomerId, arg.StripeCustomerID, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
        id,
        email,
        first_name,
        last_name,
        role,
        prefered_language
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, first_name, last_name, role, prefered_language, avatar_file_path, avatar_url, stripe_customer_id, created_at, updated_at
`

type CreateUserParams struct {
	ID               uuid.UUID
	Email            string
	FirstName        string
	LastName         string
	Role             Role
	PreferedLanguage string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Role,
		arg.PreferedLanguage,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PreferedLanguage,
		&i.AvatarFilePath,
		&i.AvatarUrl,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteAvatar = `-- name: DeleteAvatar :exec
UPDATE "user"
SET avatar_file_path = '',
    avatar_url = ''
WHERE id = $1
`

func (q *Queries) DeleteAvatar(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAvatar, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, first_name, last_name, role, prefered_language, avatar_file_path, avatar_url, stripe_customer_id, created_at, updated_at
FROM "user"
WHERE id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PreferedLanguage,
		&i.AvatarFilePath,
		&i.AvatarUrl,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateAvatar = `-- name: UpdateAvatar :exec
UPDATE "user"
SET avatar_file_path = $1,
    avatar_url = $2
WHERE id = $3
`

type UpdateAvatarParams struct {
	AvatarFilePath string
	AvatarUrl      string
	ID             uuid.UUID
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) error {
	_, err := q.db.ExecContext(ctx, updateAvatar, arg.AvatarFilePath, arg.AvatarUrl, arg.ID)
	return err
}

const updateUserNames = `-- name: UpdateUserNames :one
UPDATE "user"
SET first_name = $1,
    last_name = $2
WHERE id = $3
RETURNING id, email, first_name, last_name, role, prefered_language, avatar_file_path, avatar_url, stripe_customer_id, created_at, updated_at
`

type UpdateUserNamesParams struct {
	FirstName string
	LastName  string
	ID        uuid.UUID
}

func (q *Queries) UpdateUserNames(ctx context.Context, arg UpdateUserNamesParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, updateUserNames, arg.FirstName, arg.LastName, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PreferedLanguage,
		&i.AvatarFilePath,
		&i.AvatarUrl,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUserPreferedLanguage = `-- name: UpdateUserPreferedLanguage :exec
UPDATE "user"
SET prefered_language = $1
WHERE id = $2
`

type UpdateUserPreferedLanguageParams struct {
	PreferedLanguage string
	ID               uuid.UUID
}

func (q *Queries) UpdateUserPreferedLanguage(ctx context.Context, arg UpdateUserPreferedLanguageParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPreferedLanguage, arg.PreferedLanguage, arg.ID)
	return err
}
