// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: lang.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addSpokenLanguageToTeacher = `-- name: AddSpokenLanguageToTeacher :one
INSERT INTO "teacher_spoken_language" (
        teacher_id,
        spoken_language_id
    )
VALUES ($1, $2)
RETURNING spoken_language_id, teacher_id
`

type AddSpokenLanguageToTeacherParams struct {
	TeacherID        uuid.UUID
	SpokenLanguageID int32
}

func (q *Queries) AddSpokenLanguageToTeacher(ctx context.Context, arg AddSpokenLanguageToTeacherParams) (*TeacherSpokenLanguage, error) {
	row := q.db.QueryRowContext(ctx, addSpokenLanguageToTeacher, arg.TeacherID, arg.SpokenLanguageID)
	var i TeacherSpokenLanguage
	err := row.Scan(&i.SpokenLanguageID, &i.TeacherID)
	return &i, err
}

const createSpokenLanguage = `-- name: CreateSpokenLanguage :one
INSERT INTO "spoken_language" (language_id, proficiency)
VALUES ($1, $2)
RETURNING id, language_id, proficiency
`

type CreateSpokenLanguageParams struct {
	LanguageID  int32
	Proficiency string
}

func (q *Queries) CreateSpokenLanguage(ctx context.Context, arg CreateSpokenLanguageParams) (*SpokenLanguage, error) {
	row := q.db.QueryRowContext(ctx, createSpokenLanguage, arg.LanguageID, arg.Proficiency)
	var i SpokenLanguage
	err := row.Scan(&i.ID, &i.LanguageID, &i.Proficiency)
	return &i, err
}

const findLanguage = `-- name: FindLanguage :one
SELECT id, language
FROM "language"
WHERE language = $1
`

func (q *Queries) FindLanguage(ctx context.Context, language string) (*Language, error) {
	row := q.db.QueryRowContext(ctx, findLanguage, language)
	var i Language
	err := row.Scan(&i.ID, &i.Language)
	return &i, err
}

const findSpokenLanguage = `-- name: FindSpokenLanguage :one
SELECT sl.id, sl.language_id, sl.proficiency
FROM "spoken_language" sl
    JOIN "language" l ON sl.language_id = l.id
WHERE l.language = $1
    AND sl.proficiency = $2
`

type FindSpokenLanguageParams struct {
	Language    string
	Proficiency string
}

func (q *Queries) FindSpokenLanguage(ctx context.Context, arg FindSpokenLanguageParams) (*SpokenLanguage, error) {
	row := q.db.QueryRowContext(ctx, findSpokenLanguage, arg.Language, arg.Proficiency)
	var i SpokenLanguage
	err := row.Scan(&i.ID, &i.LanguageID, &i.Proficiency)
	return &i, err
}

const listLanguages = `-- name: ListLanguages :many
SELECT id, language
FROM "language"
`

func (q *Queries) ListLanguages(ctx context.Context) ([]*Language, error) {
	rows, err := q.db.QueryContext(ctx, listLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(&i.ID, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpokenLanguagesOfTeacher = `-- name: ListSpokenLanguagesOfTeacher :many
SELECT sl.id, sl.language_id, sl.proficiency
FROM "teacher_spoken_language" tsl
    JOIN "spoken_language" sl ON tsl.spoken_language_id = sl.id
WHERE tsl.teacher_id = $1
`

func (q *Queries) ListSpokenLanguagesOfTeacher(ctx context.Context, teacherID uuid.UUID) ([]*SpokenLanguage, error) {
	rows, err := q.db.QueryContext(ctx, listSpokenLanguagesOfTeacher, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SpokenLanguage
	for rows.Next() {
		var i SpokenLanguage
		if err := rows.Scan(&i.ID, &i.LanguageID, &i.Proficiency); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSpokenLanguageFromTeacher = `-- name: RemoveSpokenLanguageFromTeacher :exec
DELETE FROM "teacher_spoken_language"
WHERE teacher_id = $1
    AND spoken_language_id = $2
`

type RemoveSpokenLanguageFromTeacherParams struct {
	TeacherID        uuid.UUID
	SpokenLanguageID int32
}

func (q *Queries) RemoveSpokenLanguageFromTeacher(ctx context.Context, arg RemoveSpokenLanguageFromTeacherParams) error {
	_, err := q.db.ExecContext(ctx, removeSpokenLanguageFromTeacher, arg.TeacherID, arg.SpokenLanguageID)
	return err
}
