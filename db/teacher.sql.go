// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: teacher.sql

package db

import (
	"context"
	"time"
)

const addTeacherAvailability = `-- name: AddTeacherAvailability :one

INSERT INTO
    "teacher_availabilities" (
        "teacher_id",
        "startAt",
        "endAt"
    )
VALUES ($1, $2, $3) RETURNING id, teacher_id, "startAt", "endAt"
`

type AddTeacherAvailabilityParams struct {
	TeacherID string
	StartAt   time.Time
	EndAt     time.Time
}

func (q *Queries) AddTeacherAvailability(ctx context.Context, arg AddTeacherAvailabilityParams) (*TeacherAvailability, error) {
	row := q.db.QueryRowContext(ctx, addTeacherAvailability, arg.TeacherID, arg.StartAt, arg.EndAt)
	var i TeacherAvailability
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.StartAt,
		&i.EndAt,
	)
	return &i, err
}

const deleteTeacherAvailability = `-- name: DeleteTeacherAvailability :exec

DELETE FROM
    "teacher_availabilities"
WHERE
    "id" = $1
    AND "teacher_id" = $2
`

type DeleteTeacherAvailabilityParams struct {
	ID        int32
	TeacherID string
}

func (q *Queries) DeleteTeacherAvailability(ctx context.Context, arg DeleteTeacherAvailabilityParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherAvailability, arg.ID, arg.TeacherID)
	return err
}

const listTeacherAvailabilities = `-- name: ListTeacherAvailabilities :many

SELECT id, teacher_id, "startAt", "endAt" FROM "teacher_availabilities" WHERE "teacher_id" = $1
`

func (q *Queries) ListTeacherAvailabilities(ctx context.Context, teacherID string) ([]*TeacherAvailability, error) {
	rows, err := q.db.QueryContext(ctx, listTeacherAvailabilities, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TeacherAvailability
	for rows.Next() {
		var i TeacherAvailability
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.StartAt,
			&i.EndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeacherAvailability = `-- name: UpdateTeacherAvailability :exec

UPDATE
    "teacher_availabilities"
SET "startAt" = $1, "endAt" = $2
WHERE
    "id" = $3
    AND "teacher_id" = $4
`

type UpdateTeacherAvailabilityParams struct {
	StartAt   time.Time
	EndAt     time.Time
	ID        int32
	TeacherID string
}

func (q *Queries) UpdateTeacherAvailability(ctx context.Context, arg UpdateTeacherAvailabilityParams) error {
	_, err := q.db.ExecContext(ctx, updateTeacherAvailability,
		arg.StartAt,
		arg.EndAt,
		arg.ID,
		arg.TeacherID,
	)
	return err
}
