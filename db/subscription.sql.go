// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: subscription.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addSubscriptionForStudent = `-- name: AddSubscriptionForStudent :exec
INSERT INTO "subscription_student" (subscription_id, teacher_id, student_id)
VALUES ($1, $2, $3)
`

type AddSubscriptionForStudentParams struct {
	SubscriptionID string
	TeacherID      uuid.UUID
	StudentID      uuid.UUID
}

func (q *Queries) AddSubscriptionForStudent(ctx context.Context, arg AddSubscriptionForStudentParams) error {
	_, err := q.db.ExecContext(ctx, addSubscriptionForStudent, arg.SubscriptionID, arg.TeacherID, arg.StudentID)
	return err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT id, name, hours
FROM subscription
`

func (q *Queries) ListSubscriptions(ctx context.Context) ([]*Subscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(&i.ID, &i.Name, &i.Hours); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
