generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String    @unique
    emailVerified    DateTime?
    image            String?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime? @updatedAt
    accounts         Account[]
    sessions         Session[]
    profile          Profile?
    chats            Chat[]
    sentMessages     Message[] @relation("SentMessages")
    receivedMessages Message[] @relation("DeliveredMessages")
    readMessages     Message[] @relation("ReceivedMessages")

    // everybody can signup
    @@allow('create,read', true)

    // full access by self
    @@allow('all', auth() == this)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Locale {
    en
    fr
    ar
}

model Profile {
    id               String    @id
    user             User      @relation(fields: [id], references: [id], onDelete: Cascade)
    firstName        String
    lastName         String
    role             Role
    preferedLanguage Locale    @default(en)
    avatarFilePath   String?
    avatarUrl        String?
    stripeCustomerId String?
    student          Student?
    teacher          Teacher?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime? @updatedAt

    @@allow('all', true)
}

enum Role {
    student
    teacher
    admin
}

model Student {
    id            String                @id
    profile       Profile               @relation(fields: [id], references: [id], onDelete: Cascade)
    classes       Class[]
    reviews       Review[]
    hoursBank     HoursBank[]
    subscriptions StudentSubscription[]

    @@allow('all', true)
}

model Teacher {
    id                   String                @id
    bio                  String
    hourRate             Int
    topAgent             Boolean               @default(false)
    rating               Float                 @default(0)
    classesTaught        Int                   @default(0)
    profile              Profile               @relation(fields: [id], references: [id], onDelete: Cascade)
    spokenLanguages      SpokenLanguage[]
    topics               Topic[]
    classes              Class[]
    reviews              Review[]
    availabilities       TimeSlot[]
    hoursBank            HoursBank[]
    studentSubscriptions StudentSubscription[]

    @@allow('all', true)

    @@index([topAgent])
    @@index([rating])
    @@index([hourRate])
}

model Language {
    language        String           @id
    spokenLanguages SpokenLanguage[]

    @@allow('all', true)
}

model Topic {
    topic    String    @id
    teachers Teacher[]

    @@allow('all', true)
}

enum Proficiency {
    a1
    a2
    b1
    b2
    c1
    c2
    native
}

model SpokenLanguage {
    id          Int         @id @default(autoincrement())
    proficiency Proficiency
    languageId  String
    language    Language    @relation(fields: [languageId], references: [language], onDelete: Cascade)
    teachers    Teacher[]

    @@allow('all', true)

    @@unique([languageId, proficiency])
}

model HoursBank {
    hours     Int
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    studenId  String
    student   Student   @relation(fields: [studenId], references: [id], onDelete: Cascade)
    teacherId String
    teacher   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

    @@allow('all', true)

    @@id([studenId, teacherId])
}

model Subscription {
    id       String                @id
    name     String
    hours    Int
    students StudentSubscription[]

    @@allow('all', true)
}

model StudentSubscription {
    studentId      String
    teacherId      String
    subscriptionId String
    student        Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
    teacher        Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

    @@allow('all', true)

    @@id([studentId, teacherId])
}

model TimeSlot {
    id        String   @id @default(cuid())
    startAt   DateTime
    endAt     DateTime
    teacherId String
    teacher   Teacher  @relation(fields: [teacherId], references: [id])
    class     Class?

    @@allow('all', true)

    @@index([startAt, endAt])
    @@index([teacherId])
}

model Review {
    id        Int     @id @default(autoincrement())
    rating    Int
    comment   String
    studentId String
    teacherId String
    student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

    @@allow('all', true)
}

model Class {
    id         String    @id @default(cuid())
    name       String
    isPrivate  Boolean
    isTrial    Boolean
    language   String
    topic      String
    hasStarted Boolean   @default(false)
    createdAt  DateTime  @default(now())
    timeSlotId String    @unique
    teacherId  String
    teacher    Teacher   @relation(fields: [teacherId], references: [id])
    students   Student[]
    timeSlot   TimeSlot  @relation(fields: [timeSlotId], references: [id], onUpdate: NoAction)

    @@allow('all', true)
}

model Chat {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    messages  Message[]
    users     User[]

    @@allow('all', true)
}

model Message {
    id             Int       @id @default(autoincrement())
    text           String
    createdAt      DateTime  @default(now())
    updatedAt      DateTime? @updatedAt
    senderId       String
    sender         User      @relation("SentMessages", fields: [senderId], references: [id])
    conversationId String
    conversation   Chat      @relation(fields: [conversationId], references: [id])
    readBy         User[]    @relation("ReceivedMessages")
    deliveredTo    User[]    @relation("DeliveredMessages")

    @@allow('all', true)
}
