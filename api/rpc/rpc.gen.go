// nem v0.1.0 cd9dca23a38d92cd8c9ecbc73a3fd3b69646cb1b
// --
// Code generated by webrpc-gen@v0.13.0 with golang generator. DO NOT EDIT.
//
// webrpc-gen -schema=main.ridl -target=golang -pkg=rpc -server -out=./api/rpc/rpc.gen.go
package rpc

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.1.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "cd9dca23a38d92cd8c9ecbc73a3fd3b69646cb1b"
}

//
// Types
//

type AdminCreateClassRequest struct {
	UserIDs  []string  `json:"userIDs"`
	Name     string    `json:"name"`
	LearnId  int32     `json:"learnId"`
	Start_at time.Time `json:"start_at"`
	End_at   time.Time `json:"end_at"`
}

type User struct {
	Id               string    `json:"id"`
	FirstName        string    `json:"firstName"`
	LastName         string    `json:"lastName"`
	Role             string    `json:"role"`
	PreferedLanguage string    `json:"preferedLanguage"`
	AvatarFilePath   string    `json:"avatarFilePath"`
	AvatarUrl        string    `json:"avatarUrl"`
	CreatedAt        time.Time `json:"createdAt"`
}

type CreateUserRequest struct {
	FirstName        string `json:"firstName"`
	LastName         string `json:"lastName"`
	Role             string `json:"role"`
	PreferedLanguage string `json:"preferedLanguage"`
}

type CreateUserResponse struct {
	User *User `json:"user"`
}

type Learn struct {
	Id       int32  `json:"id"`
	Language string `json:"language"`
	Topic    string `json:"topic"`
}

type Teach struct {
	Id       int32  `json:"id"`
	Language string `json:"language"`
	Topic    string `json:"topic"`
}

type Class struct {
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	Language  string    `json:"language"`
	Topic     string    `json:"topic"`
	StartAt   time.Time `json:"startAt"`
	EndAt     time.Time `json:"endAt"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type ClassDetails struct {
	Class *Class  `json:"class"`
	Users []*User `json:"users"`
}

type Message struct {
	Text    string `json:"text"`
	ClassId string `json:"classId"`
}

type MessageResponse struct {
	Id        string    `json:"id"`
	Text      string    `json:"text"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	ClassId   string    `json:"classId"`
	User      *User     `json:"user"`
}

type TeacherAvalibility struct {
	Id        int32     `json:"id"`
	TeacherId string    `json:"teacherId"`
	StartAt   time.Time `json:"startAt"`
	EndAt     time.Time `json:"endAt"`
}

type AdminServiceAPI interface {
	AdminListUsers(ctx context.Context) ([]*User, error)
	AdminListClasses(ctx context.Context) ([]*Class, error)
	AdminSetRole(ctx context.Context, uID string, role string) error
	AdminCreateClass(ctx context.Context, req *AdminCreateClassRequest) (*Class, error)
}

type UserServiceAPI interface {
	Get(ctx context.Context) (*User, error)
	Create(ctx context.Context, req *CreateUserRequest) (*User, error)
	ChooseRole(ctx context.Context, role string) error
	UpdatePreferedLanguage(ctx context.Context, lang string) error
	UpdateAvatar(ctx context.Context, path string, url string) error
	DeleteAvatar(ctx context.Context) error
	Delete(ctx context.Context) error
}

type StudentServiceAPI interface {
	ListLearns(ctx context.Context) ([]*Learn, error)
	Learn(ctx context.Context, language string, topic string) (*Learn, error)
	ListClasses(ctx context.Context) ([]*Class, error)
	JoinClass(ctx context.Context, classId string) error
	LeaveClass(ctx context.Context, classId string) error
}

type TeacherServiceAPI interface {
	ListTeaches(ctx context.Context) ([]*Teach, error)
	Teach(ctx context.Context, language string, topic string) (*Teach, error)
	ListClasses(ctx context.Context) ([]*Class, error)
	ListAvailabilities(ctx context.Context) ([]*TeacherAvalibility, error)
	AddAvailability(ctx context.Context, startAt time.Time, endAt time.Time) (*TeacherAvalibility, error)
	UpdateAvailability(ctx context.Context, id int32, startAt time.Time, endAt time.Time) (*TeacherAvalibility, error)
	DeleteAvailability(ctx context.Context, id int32) error
	StartClass(ctx context.Context, classId string) error
	EndClass(ctx context.Context, classId string) error
}

type ClassServiceAPI interface {
	ListLanguages(ctx context.Context) ([]string, error)
	ListTopics(ctx context.Context) ([]string, error)
	ListAvailableLearns(ctx context.Context) ([]*Learn, error)
	ListTeachersForLearn(ctx context.Context, lang string, topic string) ([]*User, error)
	ListTeacherAvailabilities(ctx context.Context, teacherId string) ([]*TeacherAvalibility, error)
	ShowClassDetails(ctx context.Context, classId string) (*ClassDetails, error)
	GetJoinToken(ctx context.Context, roomId string) (string, error)
}

type MessageServiceAPI interface {
	SendMessage(ctx context.Context, message *Message) error
}

var WebRPCServices = map[string][]string{
	"AdminServiceAPI": {
		"AdminListUsers",
		"AdminListClasses",
		"AdminSetRole",
		"AdminCreateClass",
	},
	"UserServiceAPI": {
		"Get",
		"Create",
		"ChooseRole",
		"UpdatePreferedLanguage",
		"UpdateAvatar",
		"DeleteAvatar",
		"Delete",
	},
	"StudentServiceAPI": {
		"ListLearns",
		"Learn",
		"ListClasses",
		"JoinClass",
		"LeaveClass",
	},
	"TeacherServiceAPI": {
		"ListTeaches",
		"Teach",
		"ListClasses",
		"ListAvailabilities",
		"AddAvailability",
		"UpdateAvailability",
		"DeleteAvailability",
		"StartClass",
		"EndClass",
	},
	"ClassServiceAPI": {
		"ListLanguages",
		"ListTopics",
		"ListAvailableLearns",
		"ListTeachersForLearn",
		"ListTeacherAvailabilities",
		"ShowClassDetails",
		"GetJoinToken",
	},
	"MessageServiceAPI": {
		"SendMessage",
	},
}

//
// Server
//

type WebRPCServer interface {
	http.Handler
}

type adminServiceAPIServer struct {
	AdminServiceAPI
}

func NewAdminServiceAPIServer(svc AdminServiceAPI) WebRPCServer {
	return &adminServiceAPIServer{
		AdminServiceAPI: svc,
	}
}

func (s *adminServiceAPIServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
			panic(rr)
		}
	}()

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "AdminServiceAPI")

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/AdminServiceAPI/AdminListUsers":
		handler = s.serveAdminListUsersJSON
	case "/rpc/AdminServiceAPI/AdminListClasses":
		handler = s.serveAdminListClassesJSON
	case "/rpc/AdminServiceAPI/AdminSetRole":
		handler = s.serveAdminSetRoleJSON
	case "/rpc/AdminServiceAPI/AdminCreateClass":
		handler = s.serveAdminCreateClassJSON
	default:
		err := ErrorWithCause(ErrWebrpcBadRoute, fmt.Errorf("no handler for path %q", r.URL.Path))
		RespondWithError(w, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrorWithCause(ErrWebrpcBadMethod, fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		RespondWithError(w, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		handler(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *adminServiceAPIServer) serveAdminListUsersJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "AdminListUsers")

	// Call service method implementation.
	ret0, err := s.AdminServiceAPI.AdminListUsers(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*User `json:"users"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *adminServiceAPIServer) serveAdminListClassesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "AdminListClasses")

	// Call service method implementation.
	ret0, err := s.AdminServiceAPI.AdminListClasses(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*Class `json:"classes"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *adminServiceAPIServer) serveAdminSetRoleJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"uID"`
		Arg1 string `json:"role"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "AdminSetRole")

	// Call service method implementation.
	err = s.AdminServiceAPI.AdminSetRole(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *adminServiceAPIServer) serveAdminCreateClassJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *AdminCreateClassRequest `json:"req"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "AdminCreateClass")

	// Call service method implementation.
	ret0, err := s.AdminServiceAPI.AdminCreateClass(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 *Class `json:"class"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

type userServiceAPIServer struct {
	UserServiceAPI
}

func NewUserServiceAPIServer(svc UserServiceAPI) WebRPCServer {
	return &userServiceAPIServer{
		UserServiceAPI: svc,
	}
}

func (s *userServiceAPIServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
			panic(rr)
		}
	}()

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "UserServiceAPI")

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/UserServiceAPI/Get":
		handler = s.serveGetJSON
	case "/rpc/UserServiceAPI/Create":
		handler = s.serveCreateJSON
	case "/rpc/UserServiceAPI/ChooseRole":
		handler = s.serveChooseRoleJSON
	case "/rpc/UserServiceAPI/UpdatePreferedLanguage":
		handler = s.serveUpdatePreferedLanguageJSON
	case "/rpc/UserServiceAPI/UpdateAvatar":
		handler = s.serveUpdateAvatarJSON
	case "/rpc/UserServiceAPI/DeleteAvatar":
		handler = s.serveDeleteAvatarJSON
	case "/rpc/UserServiceAPI/Delete":
		handler = s.serveDeleteJSON
	default:
		err := ErrorWithCause(ErrWebrpcBadRoute, fmt.Errorf("no handler for path %q", r.URL.Path))
		RespondWithError(w, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrorWithCause(ErrWebrpcBadMethod, fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		RespondWithError(w, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		handler(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *userServiceAPIServer) serveGetJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "Get")

	// Call service method implementation.
	ret0, err := s.UserServiceAPI.Get(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 *User `json:"user"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *userServiceAPIServer) serveCreateJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *CreateUserRequest `json:"req"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "Create")

	// Call service method implementation.
	ret0, err := s.UserServiceAPI.Create(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 *User `json:"user"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *userServiceAPIServer) serveChooseRoleJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"role"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ChooseRole")

	// Call service method implementation.
	err = s.UserServiceAPI.ChooseRole(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *userServiceAPIServer) serveUpdatePreferedLanguageJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"lang"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdatePreferedLanguage")

	// Call service method implementation.
	err = s.UserServiceAPI.UpdatePreferedLanguage(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *userServiceAPIServer) serveUpdateAvatarJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"path"`
		Arg1 string `json:"url"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateAvatar")

	// Call service method implementation.
	err = s.UserServiceAPI.UpdateAvatar(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *userServiceAPIServer) serveDeleteAvatarJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "DeleteAvatar")

	// Call service method implementation.
	err := s.UserServiceAPI.DeleteAvatar(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *userServiceAPIServer) serveDeleteJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "Delete")

	// Call service method implementation.
	err := s.UserServiceAPI.Delete(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

type studentServiceAPIServer struct {
	StudentServiceAPI
}

func NewStudentServiceAPIServer(svc StudentServiceAPI) WebRPCServer {
	return &studentServiceAPIServer{
		StudentServiceAPI: svc,
	}
}

func (s *studentServiceAPIServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
			panic(rr)
		}
	}()

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "StudentServiceAPI")

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/StudentServiceAPI/ListLearns":
		handler = s.serveListLearnsJSON
	case "/rpc/StudentServiceAPI/Learn":
		handler = s.serveLearnJSON
	case "/rpc/StudentServiceAPI/ListClasses":
		handler = s.serveListClassesJSON
	case "/rpc/StudentServiceAPI/JoinClass":
		handler = s.serveJoinClassJSON
	case "/rpc/StudentServiceAPI/LeaveClass":
		handler = s.serveLeaveClassJSON
	default:
		err := ErrorWithCause(ErrWebrpcBadRoute, fmt.Errorf("no handler for path %q", r.URL.Path))
		RespondWithError(w, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrorWithCause(ErrWebrpcBadMethod, fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		RespondWithError(w, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		handler(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *studentServiceAPIServer) serveListLearnsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListLearns")

	// Call service method implementation.
	ret0, err := s.StudentServiceAPI.ListLearns(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*Learn `json:"learns"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *studentServiceAPIServer) serveLearnJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"language"`
		Arg1 string `json:"topic"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "Learn")

	// Call service method implementation.
	ret0, err := s.StudentServiceAPI.Learn(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 *Learn `json:"learn"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *studentServiceAPIServer) serveListClassesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListClasses")

	// Call service method implementation.
	ret0, err := s.StudentServiceAPI.ListClasses(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*Class `json:"classes"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *studentServiceAPIServer) serveJoinClassJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"classId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "JoinClass")

	// Call service method implementation.
	err = s.StudentServiceAPI.JoinClass(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *studentServiceAPIServer) serveLeaveClassJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"classId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "LeaveClass")

	// Call service method implementation.
	err = s.StudentServiceAPI.LeaveClass(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

type teacherServiceAPIServer struct {
	TeacherServiceAPI
}

func NewTeacherServiceAPIServer(svc TeacherServiceAPI) WebRPCServer {
	return &teacherServiceAPIServer{
		TeacherServiceAPI: svc,
	}
}

func (s *teacherServiceAPIServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
			panic(rr)
		}
	}()

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "TeacherServiceAPI")

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/TeacherServiceAPI/ListTeaches":
		handler = s.serveListTeachesJSON
	case "/rpc/TeacherServiceAPI/Teach":
		handler = s.serveTeachJSON
	case "/rpc/TeacherServiceAPI/ListClasses":
		handler = s.serveListClassesJSON
	case "/rpc/TeacherServiceAPI/ListAvailabilities":
		handler = s.serveListAvailabilitiesJSON
	case "/rpc/TeacherServiceAPI/AddAvailability":
		handler = s.serveAddAvailabilityJSON
	case "/rpc/TeacherServiceAPI/UpdateAvailability":
		handler = s.serveUpdateAvailabilityJSON
	case "/rpc/TeacherServiceAPI/DeleteAvailability":
		handler = s.serveDeleteAvailabilityJSON
	case "/rpc/TeacherServiceAPI/StartClass":
		handler = s.serveStartClassJSON
	case "/rpc/TeacherServiceAPI/EndClass":
		handler = s.serveEndClassJSON
	default:
		err := ErrorWithCause(ErrWebrpcBadRoute, fmt.Errorf("no handler for path %q", r.URL.Path))
		RespondWithError(w, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrorWithCause(ErrWebrpcBadMethod, fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		RespondWithError(w, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		handler(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *teacherServiceAPIServer) serveListTeachesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListTeaches")

	// Call service method implementation.
	ret0, err := s.TeacherServiceAPI.ListTeaches(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*Teach `json:"teaches"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *teacherServiceAPIServer) serveTeachJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"language"`
		Arg1 string `json:"topic"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "Teach")

	// Call service method implementation.
	ret0, err := s.TeacherServiceAPI.Teach(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 *Teach `json:"teach"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *teacherServiceAPIServer) serveListClassesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListClasses")

	// Call service method implementation.
	ret0, err := s.TeacherServiceAPI.ListClasses(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*Class `json:"classes"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *teacherServiceAPIServer) serveListAvailabilitiesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListAvailabilities")

	// Call service method implementation.
	ret0, err := s.TeacherServiceAPI.ListAvailabilities(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*TeacherAvalibility `json:"availabilities"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *teacherServiceAPIServer) serveAddAvailabilityJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 time.Time `json:"startAt"`
		Arg1 time.Time `json:"endAt"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "AddAvailability")

	// Call service method implementation.
	ret0, err := s.TeacherServiceAPI.AddAvailability(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 *TeacherAvalibility `json:"availability"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *teacherServiceAPIServer) serveUpdateAvailabilityJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 int32     `json:"id"`
		Arg1 time.Time `json:"startAt"`
		Arg2 time.Time `json:"endAt"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateAvailability")

	// Call service method implementation.
	ret0, err := s.TeacherServiceAPI.UpdateAvailability(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 *TeacherAvalibility `json:"availability"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *teacherServiceAPIServer) serveDeleteAvailabilityJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 int32 `json:"id"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "DeleteAvailability")

	// Call service method implementation.
	err = s.TeacherServiceAPI.DeleteAvailability(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *teacherServiceAPIServer) serveStartClassJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"classId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "StartClass")

	// Call service method implementation.
	err = s.TeacherServiceAPI.StartClass(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *teacherServiceAPIServer) serveEndClassJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"classId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "EndClass")

	// Call service method implementation.
	err = s.TeacherServiceAPI.EndClass(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

type classServiceAPIServer struct {
	ClassServiceAPI
}

func NewClassServiceAPIServer(svc ClassServiceAPI) WebRPCServer {
	return &classServiceAPIServer{
		ClassServiceAPI: svc,
	}
}

func (s *classServiceAPIServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
			panic(rr)
		}
	}()

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "ClassServiceAPI")

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/ClassServiceAPI/ListLanguages":
		handler = s.serveListLanguagesJSON
	case "/rpc/ClassServiceAPI/ListTopics":
		handler = s.serveListTopicsJSON
	case "/rpc/ClassServiceAPI/ListAvailableLearns":
		handler = s.serveListAvailableLearnsJSON
	case "/rpc/ClassServiceAPI/ListTeachersForLearn":
		handler = s.serveListTeachersForLearnJSON
	case "/rpc/ClassServiceAPI/ListTeacherAvailabilities":
		handler = s.serveListTeacherAvailabilitiesJSON
	case "/rpc/ClassServiceAPI/ShowClassDetails":
		handler = s.serveShowClassDetailsJSON
	case "/rpc/ClassServiceAPI/GetJoinToken":
		handler = s.serveGetJoinTokenJSON
	default:
		err := ErrorWithCause(ErrWebrpcBadRoute, fmt.Errorf("no handler for path %q", r.URL.Path))
		RespondWithError(w, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrorWithCause(ErrWebrpcBadMethod, fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		RespondWithError(w, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		handler(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *classServiceAPIServer) serveListLanguagesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListLanguages")

	// Call service method implementation.
	ret0, err := s.ClassServiceAPI.ListLanguages(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []string `json:"languages"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *classServiceAPIServer) serveListTopicsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListTopics")

	// Call service method implementation.
	ret0, err := s.ClassServiceAPI.ListTopics(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []string `json:"topics"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *classServiceAPIServer) serveListAvailableLearnsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListAvailableLearns")

	// Call service method implementation.
	ret0, err := s.ClassServiceAPI.ListAvailableLearns(ctx)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*Learn `json:"learns"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *classServiceAPIServer) serveListTeachersForLearnJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"lang"`
		Arg1 string `json:"topic"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListTeachersForLearn")

	// Call service method implementation.
	ret0, err := s.ClassServiceAPI.ListTeachersForLearn(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*User `json:"teachers"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *classServiceAPIServer) serveListTeacherAvailabilitiesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"teacherId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListTeacherAvailabilities")

	// Call service method implementation.
	ret0, err := s.ClassServiceAPI.ListTeacherAvailabilities(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 []*TeacherAvalibility `json:"availabilities"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *classServiceAPIServer) serveShowClassDetailsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"classId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "ShowClassDetails")

	// Call service method implementation.
	ret0, err := s.ClassServiceAPI.ShowClassDetails(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 *ClassDetails `json:"class"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *classServiceAPIServer) serveGetJoinTokenJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"roomId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetJoinToken")

	// Call service method implementation.
	ret0, err := s.ClassServiceAPI.GetJoinToken(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	respPayload := struct {
		Ret0 string `json:"token"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

type messageServiceAPIServer struct {
	MessageServiceAPI
}

func NewMessageServiceAPIServer(svc MessageServiceAPI) WebRPCServer {
	return &messageServiceAPIServer{
		MessageServiceAPI: svc,
	}
}

func (s *messageServiceAPIServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
			panic(rr)
		}
	}()

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "MessageServiceAPI")

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/MessageServiceAPI/SendMessage":
		handler = s.serveSendMessageJSON
	default:
		err := ErrorWithCause(ErrWebrpcBadRoute, fmt.Errorf("no handler for path %q", r.URL.Path))
		RespondWithError(w, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrorWithCause(ErrWebrpcBadMethod, fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		RespondWithError(w, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		handler(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *messageServiceAPIServer) serveSendMessageJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Message `json:"message"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		RespondWithError(w, ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	ctx = context.WithValue(ctx, MethodNameCtxKey, "SendMessage")

	// Call service method implementation.
	err = s.MessageServiceAPI.SendMessage(ctx, reqPayload.Arg0)
	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func RespondWithError(w http.ResponseWriter, err error) {
	rpcErr, ok := err.(WebRPCError)
	if !ok {
		rpcErr = ErrorWithCause(ErrWebrpcEndpoint, err)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

//
// Helpers
//

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	HTTPResponseWriterCtxKey = &contextKey{"HTTPResponseWriter"}

	HTTPRequestCtxKey = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)

func ServiceNameFromContext(ctx context.Context) string {
	service, _ := ctx.Value(ServiceNameCtxKey).(string)
	return service
}

func MethodNameFromContext(ctx context.Context) string {
	method, _ := ctx.Value(MethodNameCtxKey).(string)
	return method
}

func RequestFromContext(ctx context.Context) *http.Request {
	r, _ := ctx.Value(HTTPRequestCtxKey).(*http.Request)
	return r
}
func ResponseWriterFromContext(ctx context.Context) http.ResponseWriter {
	w, _ := ctx.Value(HTTPResponseWriterCtxKey).(http.ResponseWriter)
	return w
}

//
// Errors
//

type WebRPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"msg"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"status"`
	cause      error
}

var _ error = WebRPCError{}

func (e WebRPCError) Error() string {
	if e.cause != nil {
		return fmt.Sprintf("%s %d: %s: %v", e.Name, e.Code, e.Message, e.cause)
	}
	return fmt.Sprintf("%s %d: %s", e.Name, e.Code, e.Message)
}

func (e WebRPCError) Is(target error) bool {
	if rpcErr, ok := target.(WebRPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e WebRPCError) Unwrap() error {
	return e.cause
}

func ErrorWithCause(rpcErr WebRPCError, cause error) WebRPCError {
	err := rpcErr
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Webrpc errors
var (
	ErrWebrpcEndpoint      = WebRPCError{Code: 0, Name: "WebrpcEndpoint", Message: "endpoint error", HTTPStatus: 400}
	ErrWebrpcRequestFailed = WebRPCError{Code: -1, Name: "WebrpcRequestFailed", Message: "request failed", HTTPStatus: 400}
	ErrWebrpcBadRoute      = WebRPCError{Code: -2, Name: "WebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadMethod     = WebRPCError{Code: -3, Name: "WebrpcBadMethod", Message: "bad method", HTTPStatus: 405}
	ErrWebrpcBadRequest    = WebRPCError{Code: -4, Name: "WebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse   = WebRPCError{Code: -5, Name: "WebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
	ErrWebrpcServerPanic   = WebRPCError{Code: -6, Name: "WebrpcServerPanic", Message: "server panic", HTTPStatus: 500}
	ErrWebrpcInternalError = WebRPCError{Code: -7, Name: "WebrpcInternalError", Message: "internal error", HTTPStatus: 500}
)

// Schema errors
var (
	ErrUnauthorized          = WebRPCError{Code: 401, Name: "Unauthorized", Message: "Unauthorized access", HTTPStatus: 401}
	ErrPermissionDenied      = WebRPCError{Code: 403, Name: "PermissionDenied", Message: "Permission denied", HTTPStatus: 403}
	ErrUserAlreadyRegistered = WebRPCError{Code: 1, Name: "UserAlreadyRegistered", Message: "User already registered", HTTPStatus: 400}
)
