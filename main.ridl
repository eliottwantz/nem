webrpc = v1

name = nem
version = v0.1.0


#################### STRUCTS ####################

struct User
    - id: string
    - email: string
    - firstName: string
    - lastName: string
    - role: string
    - preferedLanguage: string
    - avatarFilePath: string
    - avatarUrl: string
    - createdAt: timestamp
    - updatedAt: timestamp

struct Teacher
    - id: string
    - email: string
    - firstName: string
    - lastName: string
    - role: string
    - preferedLanguage: string
    - avatarFilePath: string
    - avatarUrl: string
    - bio: string
    - hourRate: int32
    - topAgent: bool
    - spokenLanguages: []SpokenLanguage
    - topicsTaught: []string
    - createdAt: timestamp
    - updatedAt: timestamp

struct SpokenLanguage
    - language: string
    - proficiency: string

struct CreateStudentRequest
    - firstName: string
    - lastName: string
    - email: string
    - role: string
    - preferedLanguage: string

struct CreateTeacherRequest
    - firstName: string
    - lastName: string
    - email: string
    - role: string
    - preferedLanguage: string
    - bio: string
    - hourRate: int32
    - spokenLanguages: []CreateTeacherRequestSpokenLanguage

struct CreateTeacherRequestSpokenLanguage
    - language: string
    - proficiency: string

struct Topic
    - id: int32
    - topic: string


struct Class
    - id: string
    - teacherId: string
    - isPrivate: bool
    - name: string
    - hasStarted: bool
    - language: string
    - topic: string
    - startAt: timestamp
    - endAt: timestamp
    - createdAt: timestamp

struct ClassDetails
    - class: Class
    - users: []User
    - teacher: Teacher


struct Message
    - text: string
    - classId: string

struct MessageResponse
    - id: string
    - text: string
    - createdAt: timestamp
    - updatedAt: timestamp
    - classId: string
    - user: User

struct TimesRequest
    - startAt: timestamp
    - endAt: timestamp

struct AddAvailabilityRequest
    - times: []TimesRequest
    - startAt: timestamp
    - endAt: timestamp

struct EditAvailabilityRequest
    - id: string
    - times: []TimesRequest
    - startAt: timestamp
    - endAt: timestamp

struct TimeSlot
    - id: string
    - teacherId: string
    - startAt: timestamp
    - endAt: timestamp

struct CreateClassRequest
    - name: string
    - isPrivate: bool
    - language: string
    - topic: string
    - timeSlotId: string

struct ListTeachersFilters
    - language: string
    - topic: string
    - topAgent: bool
    - priceMax: int32
    - ratingMin: int32
    - ratingMax: int32
    - cursor: string


#################### STRUCTS ####################


#################### SERVICES ####################

service UserServiceAPI
    - Get() => (user: User)
    - FindUserByID(id: string) => (user: User)
    - ListTeachers(filters: ListTeachersFilters) => (teachers: []Teacher)
    - CreateStudent(req: CreateStudentRequest) 
    - CreateTeacher(req: CreateTeacherRequest)
    - UpdatePreferedLanguage(lang: string)
    - UpdateAvatar(path: string, url: string)
    - DeleteAvatar()
    - Delete()

service StudentServiceAPI
    - ListClasses() => (classes: []Class)
    - ListTeachersOfStudent() => (teachers: []Teacher)
    - JoinClass(classId: string)
    - LeaveClass(classId: string)

service TeacherServiceAPI
    - FindTeacherByID(id: string) => (teacher: Teacher)
    - ListClasses(teacherId: string) => (classes: []Class)
    - ListStudents(teacherId: string) => (students: []User)
    - ListAvailabilities(teacherId: string) => (timeSlots: []TimeSlot)

    - Teach(topic: string)
    - StopTeachingTopics(topics: []string)
    - AddAvailability(req: AddAvailabilityRequest) => (timeSlots: []TimeSlot)
    - UpdateAvailability(req: EditAvailabilityRequest) => (timeSlots: []TimeSlot)
    - DeleteAvailability(id: string)
    - StartClass(classId: string)
    - EndClass(classId: string)
    - CancelClass(classId: string) => (usersInClass: []User, teacher: User)

service ClassServiceAPI
    - ListLanguages() => (languages: []string)
    - ListTopics() => (topics: []string)
    - ShowClassDetails(classId: string) => (classDetails: ClassDetails)
    - GetJoinToken(roomId: string) => (token: string)
    - CreateOrJoinClass(req: CreateClassRequest) => (class: Class)

service MessageServiceAPI
    - SendMessage(message: Message)


#################### SERVICES ####################


#################### ERRORS ####################

error 401 Unauthorized "Unauthorized access" HTTP 401
error 403 PermissionDenied "Permission denied" HTTP 403
error 1 UserAlreadyRegistered "User already registered" HTTP 400

#################### ERRORS ####################